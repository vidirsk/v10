import { getEarthquake, searchEarthquakes } from './api.js';
import { el } from './elements.js';

/**
 * B√Ωr til leitarform.
 * @param {(e: SubmitEvent) => void} searchHandler Fall sem keyrt er √æegar leita√∞ er.
 * @param {string | undefined} query Leitarstrengur.
 * @returns {HTMLElement} Leitarform.
 */
export function renderSearchForm(searchHandler, query = undefined) {
  const search = el('input', {
    type: 'search',
    placeholder: 'Leitaror√∞',
    value: query ?? '',
  });
  const button = el('button', {}, 'Leita');

  const container = el('form', { class: 'search' }, search, button);
  container.addEventListener('submit', searchHandler);
  return container;
}

/**
 * Setur ‚Äûloading state‚Äú skilaba√∞ me√∞an g√∂gn eru s√≥tt.
 * @param {HTMLElement} parentElement Element sem √° a√∞ birta skilbao√∞ √≠.
 * @param {Element | undefined} searchForm Leitarform sem √° a√∞ gera √≥virkt.
 */
function setLoading(parentElement, searchForm = undefined) {
  let loadingElement = parentElement.querySelector('.loading');

  if (!loadingElement) {
    loadingElement = el('div', { class: 'loading' }, 'S√¶ki g√∂gn...');
    parentElement.appendChild(loadingElement);
  }

  if (!searchForm) {
    return;
  }

  const button = searchForm.querySelector('button');

  if (button) {
    button.setAttribute('disabled', 'disabled');
  }
}

/**
 * Fjarl√¶gir ‚Äûloading state‚Äú.
 * @param {HTMLElement} parentElement Element sem inniheldur skilabo√∞.
 * @param {Element | undefined} searchForm Leitarform sem √° a√∞ gera virkt.
 */
function setNotLoading(parentElement, searchForm = undefined) {
  const loadingElement = parentElement.querySelector('.loading');

  if (loadingElement) {
    loadingElement.remove();
  }

  if (!searchForm) {
    return;
  }

  const disabledButton = searchForm.querySelector('button[disabled]');

  if (disabledButton) {
    disabledButton.removeAttribute('disabled');
  }
}

/**
 * Birta ni√∞urst√∂√∞ur √∫r leit.
 * @param {import('./api.types.js').Quake[] | null} results Ni√∞urst√∂√∞ur √∫r leit
 * @param {string} query Leitarstrengur.
 */
function createSearchResults(results, query) {
  const list = el('ul', { class: 'results' });

  if (!results) {
    // Error state
    const item = el('li', { class: 'result' }, 'Villa vi√∞ a√∞ s√¶kja g√∂gn.');
    list.appendChild(item);
  } else {
    // Empty state
    if (results.length === 0) {
      const item = el('li', { class: 'result' }, 'Ekkert fannst.');
      list.appendChild(item);
    }

    // Data state
    for (const result of results) {
      const item = el(
        'li',
        { class: 'result' },
        el('a', { href: `/?id=${result.id}` }, result.name),
        el(
          'span',
          { class: `status ${result.status.abbrev}` },
          result.status.name,
        ),
        el('span', { class: 'mission' }, result.mission ?? '*Ekkert heiti*'),
      );
      list.appendChild(item);
    }
  }

  return el(
    'div',
    { class: 'results' },
    el('h2', {}, `Leitarni√∞urst√∂√∞ur fyrir ‚Äû${query}‚Äú`),
    list,
  );
}

/**
 *
 * @param {HTMLElement} parentElement Element sem √° a√∞ birta ni√∞urst√∂√∞ur √≠.
 * @param {Element} searchForm Form sem √° a√∞ gera √≥virkt.
 * @param {string} query Leitarstrengur.
 */
export async function searchAndRender(parentElement, searchForm, query) {
  const mainElement = parentElement.querySelector('main');

  if (!mainElement) {
    console.warn('fann ekki <main> element');
    return;
  }

  // Fjarl√¶gja fyrri ni√∞urst√∂√∞ur
  const resultsElement = mainElement.querySelector('.results');
  if (resultsElement) {
    resultsElement.remove();
  }

  setLoading(mainElement, searchForm);
  const results = await searchEarthquakes(query);
  setNotLoading(mainElement, searchForm);

  const resultsEl = createSearchResults(results, query);

  mainElement.appendChild(resultsEl);
}

/**
 * S√Ωna fors√≠√∞u me√∞ leitarni√∞urst√∂√∞um.
 * @param {HTMLElement} parentElement Element sem √° a√∞ innihalda fors√≠√∞u.
 * @param {(e: SubmitEvent) => void} searchHandler Fall sem keyrt er √æegar leita√∞ er.
 * @param {string | undefined} query Leitaror√∞, ef eitthva√∞, til a√∞ s√Ωna ni√∞urst√∂√∞ur fyrir.
 */
export function renderFrontpage(
  parentElement,
  searchHandler,
  query = undefined,
) {
  const heading = el('h1', {}, 'Jar√∞skj√°lftavirkni üåã');
  const searchForm = renderSearchForm(searchHandler, query);
  const container = el('main', {}, heading, searchForm);
  parentElement.appendChild(container);

  if (!query) {
    return;
  }

  searchAndRender(parentElement, searchForm, query);
}

/**
 * S√Ωna jar√∞skj√°lfta.
 * @param {HTMLElement} parentElement Element sem √° a√∞ innihalda geimskot.
 * @param {string} id Au√∞kenni geimskots.
 */
export async function renderDetails(parentElement, id) {
  const container = el('main', {});
  const backElement = el(
    'div',
    { class: 'back' },
    el('a', { href: '/' }, 'Til baka'),
  );

  parentElement.appendChild(container);

  setLoading(container);
  const result = await getEarthquake(id);
  setNotLoading(container);

  // T√≥mt og villu state, vi√∞ gerum ekki greinarmun √° √æessu tvennu, ef vi√∞
  // myndum vilja gera √æa√∞ √æyrftum vi√∞ a√∞ skilgreina st√∂√∞u fyrir ni√∞urst√∂√∞u
  if (!result) {
    container.appendChild(el('p', {}, 'Villa vi√∞ a√∞ s√¶kja g√∂gn um geimskot!'));
    container.appendChild(backElement);
    return;
  }

  const missionElement = result.mission
    ? el(
        'div',
        { class: 'mission' },
        el('h2', {}, `Geimfer√∞: ${result.mission?.name ?? '*Engin l√Ωsing*'}`),
        el('p', {}, result.mission?.description ?? '*Engin l√Ωsing*'),
      )
    : el('p', {}, 'Engar uppl√Ωsingar um geimfer√∞.');

  const quakeElement = el(
    'article',
    { class: 'quake' },
    el(
      'section',
      { class: 'info' },
      el('h1', {}, result.name),
      el(
        'div',
        { class: 'window' },
        el('p', {}, `Gluggi opnast: ${result.window_start}`),
        el('p', {}, `Gluggi lokast: ${result.window_end}`),
      ),
      el(
        'div',
        { class: 'status' },
        el('h2', {}, `Sta√∞a: ${result.status.name}`),
        el('p', {}, result.status.description),
      ),
      missionElement,
    ),
    el('div', { class: 'image' }, el('img', { src: result.image, alt: '' })),
    backElement,
  );

  container.appendChild(quakeElement);
}